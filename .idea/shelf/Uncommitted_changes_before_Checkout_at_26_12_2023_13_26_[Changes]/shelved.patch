Index: src/test/java/org/max/lesson3/demo/accuweather/DemoTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.max.lesson3.demo.accuweather;\r\n\r\nimport io.restassured.http.ContentType;\r\nimport io.restassured.http.Cookie;\r\nimport io.restassured.http.Headers;\r\nimport io.restassured.http.Method;\r\nimport io.restassured.path.json.JsonPath;\r\nimport io.restassured.response.Response;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.util.Map;\r\n\r\nimport static io.restassured.RestAssured.given;\r\nimport static org.hamcrest.CoreMatchers.*;\r\nimport static org.hamcrest.CoreMatchers.equalTo;\r\nimport static org.hamcrest.MatcherAssert.assertThat;\r\nimport static org.hamcrest.Matchers.lessThan;\r\n\r\npublic class DemoTest extends AccuweatherAbstractTest{\r\n\r\n    @Test\r\n    void getExampleTest() {\r\n        given()\r\n                .when()\r\n                .get(getBaseUrl()+\"/locations/v1/regions?\" +\r\n                        \"apikey=\" +getApiKey())\r\n                .then()\r\n                .statusCode(200);\r\n\r\n    }\r\n\r\n    @Test\r\n    void getSpecifyingRequestDataTest() {\r\n        given()\r\n                .when()\r\n                .request(Method.GET,getBaseUrl()+\"/locations/{version}/regions?\" +\r\n                        \"apikey={apiKey}\", \"v1\", getApiKey())\r\n                .then()\r\n                .statusCode(200);\r\n\r\n        given()\r\n                .queryParam(\"apikey\", getApiKey())\r\n                .pathParam(\"version\", \"v1\")\r\n                .when()\r\n                .request(Method.GET,getBaseUrl()+\"/locations/{version}/regions\")\r\n                .then()\r\n                .statusCode(200);\r\n\r\n         given().cookie(\"username\",\"max\")\r\n                .cookie( new Cookie\r\n                        .Builder(\"some_cookie\", \"some_value\")\r\n                        .setSecured(true)\r\n                        .setComment(\"some comment\")\r\n                        .build())\r\n                .when()\r\n                .get(getBaseUrl()+\"/locations/v1/regions?\" +\r\n                        \"apikey=\" +getApiKey())\r\n                .then()\r\n                .statusCode(200);\r\n\r\n        given().headers(\"username\",\"max\")\r\n                .when()\r\n                .get(getBaseUrl()+\"/locations/v1/regions?\" +\r\n                        \"apikey=\" +getApiKey())\r\n                .then()\r\n                .statusCode(200);\r\n    }\r\n\r\n    @Test\r\n    void getResponseData(){\r\n        Response response = given()\r\n                .when()\r\n                .request(Method.GET,getBaseUrl()+\"/locations/{version}/regions?\" +\r\n                        \"apikey={apiKey}\", \"v1\", getApiKey());\r\n\r\n        // Get all headers\r\n        Headers allHeaders = response.getHeaders();\r\n        // Get a single header value:\r\n        System.out.println(\"Content-Encoding: \" + response.getHeader(\"Content-Encoding\"));\r\n\r\n        // Get all cookies as simple name-value pairs\r\n        Map<String, String> allCookies = response.getCookies();\r\n        // Get a single cookie value:\r\n        System.out.println(\"CookieName: \" + response.getCookie(\"cookieName\"));\r\n\r\n        // Get status line\r\n        System.out.println(\"StatusLine: \" + response.getStatusLine());\r\n        // Get status code\r\n        System.out.println(\"Code: \" + response.getStatusCode());\r\n\r\n\r\n        String regionId = given()\r\n                .when()\r\n                .request(Method.GET,getBaseUrl()+\"/locations/{version}/regions?\" +\r\n                        \"apikey={apiKey}\", \"v1\", getApiKey())\r\n                .path(\"data[0].ID\");\r\n\r\n        System.out.println(\"region code: \" + regionId);\r\n\r\n        String localizedName = given()\r\n                .when()\r\n                .request(Method.GET,getBaseUrl()+\"/locations/{version}/regions?\" +\r\n                        \"apikey={apiKey}\", \"v1\", getApiKey())\r\n                .then().extract()\r\n                .jsonPath()\r\n                .getString(\"data[2].LocalizedName\");\r\n\r\n        System.out.println(\"localizedName: \" + localizedName);\r\n\r\n    }\r\n\r\n    @Test\r\n    void getVerifyingResponseData(){\r\n\r\n        JsonPath response = given()\r\n                .when()\r\n                .request(Method.GET,getBaseUrl()+\"/locations/{version}/regions?\" +\r\n                        \"apikey={apiKey}\", \"v1\", getApiKey())\r\n                .body()\r\n                .jsonPath();\r\n\r\n        assertThat(response.get(\"[0].ID\"), equalTo(\"AFR\"));\r\n        assertThat(response.get(\"[1].ID\"), equalTo(\"ANT\"));\r\n        assertThat(response.get(\"[2].ID\"), equalTo(\"ARC\"));\r\n\r\n\r\n        given().response().expect()\r\n                .body(\"[0].LocalizedName\", equalTo(\"Africa\"))\r\n                .body(\"[0].EnglishName\", equalTo(\"Africa\"))\r\n                .when()\r\n                .request(Method.GET,getBaseUrl()+\"/locations/{version}/regions?\" +\r\n                        \"apikey={apiKey}\", \"v1\", getApiKey())\r\n                .then()\r\n                .assertThat()\r\n                //.cookie(\"cookieName\", \"cookieValue\")\r\n                .statusCode(200)\r\n                .statusLine(\"HTTP/1.1 200 OK\")\r\n                .header(\"Connection\", \"keep-alive\")\r\n                .contentType(ContentType.JSON)\r\n                .time(lessThan(2000L));\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/org/max/lesson3/demo/accuweather/DemoTest.java b/src/test/java/org/max/lesson3/demo/accuweather/DemoTest.java
--- a/src/test/java/org/max/lesson3/demo/accuweather/DemoTest.java	(revision 78690cf5460f78b2f9a2eb7dbf5a0cfe5ef0fded)
+++ b/src/test/java/org/max/lesson3/demo/accuweather/DemoTest.java	(date 1703178055180)
@@ -11,7 +11,6 @@
 import java.util.Map;
 
 import static io.restassured.RestAssured.given;
-import static org.hamcrest.CoreMatchers.*;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.lessThan;
